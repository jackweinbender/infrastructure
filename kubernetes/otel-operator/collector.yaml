apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: simplest
spec:
  serviceAccount: otel-collector
  env:
    - name: GRAFANA_CLOUD_API_KEY
      valueFrom:
        secretKeyRef:
          name: grafana-token
          key: token
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus/node-exporter:
        config:
          scrape_configs:
            - job_name: "integrations/node_exporter"
              scrape_interval: 60s
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels:
                    [__meta_kubernetes_pod_label_app_kubernetes_io_name]
                  action: keep
                  regex: prometheus-node-exporter.*
                - source_labels: [__meta_kubernetes_pod_node_name]
                  target_label: instance
                - source_labels: [__meta_kubernetes_namespace]
                  target_label: namespace
                - action: replace
                  source_labels: [__address__]
                  regex: "(.*):10250"
                  replacement: "$1:9100"
                  target_label: __address__
              metric_relabel_configs:
                - source_labels: [__name__]
                  action: keep
                  regex: node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|node_network_receive_bytes_total|node_network_receive_drop_total|node_network_transmit_bytes_total|node_network_transmit_drop_total|process_cpu_seconds_total|process_resident_memory_bytes
      prometheus/ksm:
        config:
          scrape_configs:
            - job_name: "integrations/kubernetes/kube-state-metrics"
              scrape_interval: 120s
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels:
                    [__meta_kubernetes_pod_label_app_kubernetes_io_name]
                  action: keep
                  regex: kube-state-metrics
              metric_relabel_configs:
                - source_labels: [__name__]
                  action: keep
                  regex: kube_configmap_info|kube_configmap_metadata_resource_version|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*
              static_configs:
                - targets:
                    ["kube-state-metrics.kube-system.svc.cluster.local:8080"]
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      attributes/add_cluster:
        actions:
          - key: k8s.cluster.name
            value: homelab
            action: upsert
          - key: cluster
            value: homelab
            action: upsert

    exporters:
      debug: {}
      otlphttp/grafana:
        endpoint: "https://otlp-gateway-prod-us-east-0.grafana.net/otlp"
        headers:
          authorization: "Basic ${GRAFANA_CLOUD_API_KEY}"
        tls:
          insecure: false

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug]
        metrics:
          receivers: [otlp, prometheus/node-exporter, prometheus/ksm]
          processors:
            - attributes/add_cluster
            - memory_limiter
            - batch
          exporters: [debug, otlphttp/grafana]
